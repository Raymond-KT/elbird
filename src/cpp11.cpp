// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// Kiwi.cpp
bool Kiwi_ready(SEXP kw);
extern "C" SEXP _elbird_Kiwi_ready(SEXP kw) {
  BEGIN_CPP11
    return cpp11::as_sexp(Kiwi_ready(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kw)));
  END_CPP11
}
// Kiwi.cpp
std::string Kiwi_archType(SEXP kw);
extern "C" SEXP _elbird_Kiwi_archType(SEXP kw) {
  BEGIN_CPP11
    return cpp11::as_sexp(Kiwi_archType(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kw)));
  END_CPP11
}
// Kiwi.cpp
int Kiwi_getNumThreads(SEXP kw);
extern "C" SEXP _elbird_Kiwi_getNumThreads(SEXP kw) {
  BEGIN_CPP11
    return cpp11::as_sexp(Kiwi_getNumThreads(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kw)));
  END_CPP11
}
// Kiwi.cpp
double Kiwi_getCutOffThreshold(SEXP kw);
extern "C" SEXP _elbird_Kiwi_getCutOffThreshold(SEXP kw) {
  BEGIN_CPP11
    return cpp11::as_sexp(Kiwi_getCutOffThreshold(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kw)));
  END_CPP11
}
// Kiwi.cpp
void Kiwi_setCutOffThreshold(SEXP kw, float v);
extern "C" SEXP _elbird_Kiwi_setCutOffThreshold(SEXP kw, SEXP v) {
  BEGIN_CPP11
    Kiwi_setCutOffThreshold(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kw), cpp11::as_cpp<cpp11::decay_t<float>>(v));
    return R_NilValue;
  END_CPP11
}
// Kiwi.cpp
bool Kiwi_getIntegrateAllomorph(SEXP kw);
extern "C" SEXP _elbird_Kiwi_getIntegrateAllomorph(SEXP kw) {
  BEGIN_CPP11
    return cpp11::as_sexp(Kiwi_getIntegrateAllomorph(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kw)));
  END_CPP11
}
// Kiwi.cpp
void Kiwi_setIntegrateAllomorph(SEXP kw, bool v);
extern "C" SEXP _elbird_Kiwi_setIntegrateAllomorph(SEXP kw, SEXP v) {
  BEGIN_CPP11
    Kiwi_setIntegrateAllomorph(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kw), cpp11::as_cpp<cpp11::decay_t<bool>>(v));
    return R_NilValue;
  END_CPP11
}
// KiwiBuilder.cpp
SEXP Kiwi_Builder(const std::string& modelPath);
extern "C" SEXP _elbird_Kiwi_Builder(SEXP modelPath) {
  BEGIN_CPP11
    return cpp11::as_sexp(Kiwi_Builder(cpp11::as_cpp<cpp11::decay_t<const std::string&>>(modelPath)));
  END_CPP11
}
// KiwiBuilder.cpp
SEXP Kiwi_Builder_build(SEXP kbe);
extern "C" SEXP _elbird_Kiwi_Builder_build(SEXP kbe) {
  BEGIN_CPP11
    return cpp11::as_sexp(Kiwi_Builder_build(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kbe)));
  END_CPP11
}
// KiwiBuilder.cpp
bool Kiwi_Builder_ready(SEXP kbe);
extern "C" SEXP _elbird_Kiwi_Builder_ready(SEXP kbe) {
  BEGIN_CPP11
    return cpp11::as_sexp(Kiwi_Builder_ready(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kbe)));
  END_CPP11
}
// KiwiBuilder.cpp
void Kiwi_Builder_saveModel(SEXP kbe, const std::string& modelPath);
extern "C" SEXP _elbird_Kiwi_Builder_saveModel(SEXP kbe, SEXP modelPath) {
  BEGIN_CPP11
    Kiwi_Builder_saveModel(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kbe), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(modelPath));
    return R_NilValue;
  END_CPP11
}
// KiwiBuilder.cpp
size_t Kiwi_Builder_loadDictionary(SEXP kbe, const std::string& dictPath);
extern "C" SEXP _elbird_Kiwi_Builder_loadDictionary(SEXP kbe, SEXP dictPath) {
  BEGIN_CPP11
    return cpp11::as_sexp(Kiwi_Builder_loadDictionary(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kbe), cpp11::as_cpp<cpp11::decay_t<const std::string&>>(dictPath)));
  END_CPP11
}
// KiwiBuilder.cpp
bool Kiwi_Builder_addWord(SEXP kbe, const std::u16string& form);
extern "C" SEXP _elbird_Kiwi_Builder_addWord(SEXP kbe, SEXP form) {
  BEGIN_CPP11
    return cpp11::as_sexp(Kiwi_Builder_addWord(cpp11::as_cpp<cpp11::decay_t<SEXP>>(kbe), cpp11::as_cpp<cpp11::decay_t<const std::u16string&>>(form)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_elbird_Kiwi_Builder",                (DL_FUNC) &_elbird_Kiwi_Builder,                1},
    {"_elbird_Kiwi_Builder_addWord",        (DL_FUNC) &_elbird_Kiwi_Builder_addWord,        2},
    {"_elbird_Kiwi_Builder_build",          (DL_FUNC) &_elbird_Kiwi_Builder_build,          1},
    {"_elbird_Kiwi_Builder_loadDictionary", (DL_FUNC) &_elbird_Kiwi_Builder_loadDictionary, 2},
    {"_elbird_Kiwi_Builder_ready",          (DL_FUNC) &_elbird_Kiwi_Builder_ready,          1},
    {"_elbird_Kiwi_Builder_saveModel",      (DL_FUNC) &_elbird_Kiwi_Builder_saveModel,      2},
    {"_elbird_Kiwi_archType",               (DL_FUNC) &_elbird_Kiwi_archType,               1},
    {"_elbird_Kiwi_getCutOffThreshold",     (DL_FUNC) &_elbird_Kiwi_getCutOffThreshold,     1},
    {"_elbird_Kiwi_getIntegrateAllomorph",  (DL_FUNC) &_elbird_Kiwi_getIntegrateAllomorph,  1},
    {"_elbird_Kiwi_getNumThreads",          (DL_FUNC) &_elbird_Kiwi_getNumThreads,          1},
    {"_elbird_Kiwi_ready",                  (DL_FUNC) &_elbird_Kiwi_ready,                  1},
    {"_elbird_Kiwi_setCutOffThreshold",     (DL_FUNC) &_elbird_Kiwi_setCutOffThreshold,     2},
    {"_elbird_Kiwi_setIntegrateAllomorph",  (DL_FUNC) &_elbird_Kiwi_setIntegrateAllomorph,  2},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_elbird(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
