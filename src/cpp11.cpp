// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// code.cpp
std::string kiwi_version_();
extern "C" SEXP _elbird_kiwi_version_() {
  BEGIN_CPP11
    return cpp11::as_sexp(kiwi_version_());
  END_CPP11
}
// code.cpp
std::string kiwi_error_();
extern "C" SEXP _elbird_kiwi_error_() {
  BEGIN_CPP11
    return cpp11::as_sexp(kiwi_error_());
  END_CPP11
}
// code.cpp
void kiwi_clear_error_();
extern "C" SEXP _elbird_kiwi_clear_error_() {
  BEGIN_CPP11
    kiwi_clear_error_();
    return R_NilValue;
  END_CPP11
}
// code.cpp
SEXP kiwi_init_(const char* model_path, int num_threads, int options);
extern "C" SEXP _elbird_kiwi_init_(SEXP model_path, SEXP num_threads, SEXP options) {
  BEGIN_CPP11
    return cpp11::as_sexp(kiwi_init_(cpp11::as_cpp<cpp11::decay_t<const char*>>(model_path), cpp11::as_cpp<cpp11::decay_t<int>>(num_threads), cpp11::as_cpp<cpp11::decay_t<int>>(options)));
  END_CPP11
}
// code.cpp
SEXP kiwi_analyze_(SEXP handle_ex, const char* text, int top_n, int match_options);
extern "C" SEXP _elbird_kiwi_analyze_(SEXP handle_ex, SEXP text, SEXP top_n, SEXP match_options) {
  BEGIN_CPP11
    return cpp11::as_sexp(kiwi_analyze_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(handle_ex), cpp11::as_cpp<cpp11::decay_t<const char*>>(text), cpp11::as_cpp<cpp11::decay_t<int>>(top_n), cpp11::as_cpp<cpp11::decay_t<int>>(match_options)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_elbird_kiwi_analyze_",     (DL_FUNC) &_elbird_kiwi_analyze_,     4},
    {"_elbird_kiwi_clear_error_", (DL_FUNC) &_elbird_kiwi_clear_error_, 0},
    {"_elbird_kiwi_error_",       (DL_FUNC) &_elbird_kiwi_error_,       0},
    {"_elbird_kiwi_init_",        (DL_FUNC) &_elbird_kiwi_init_,        3},
    {"_elbird_kiwi_version_",     (DL_FUNC) &_elbird_kiwi_version_,     0},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_elbird(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
